// @ts-check
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

/**
 * Generate a URL-friendly slug from category name
 * @param {string} categoryName - Full category name
 * @returns {string} URL slug
 */
const generateCategorySlug = (categoryName) => {
  return categoryName
    .toLowerCase()
    .replace(/[^a-z0-9\s-]/g, '') // Remove special characters
    .replace(/\s+/g, '-') // Replace spaces with hyphens
    .replace(/-+/g, '-') // Replace multiple hyphens with single
    .trim()
}

/**
 * Transform loaded category data into question objects
 * @param {Object} categoryData - Raw category data from JSON
 * @param {string} categorySlug - Category slug identifier
 * @returns {Array} Array of question objects
 */
const transformCategoryData = (categoryData, categorySlug) => {
  const questions = []
  let questionCounter = 1

  Object.entries(categoryData.questions).forEach(([skillLevel, questionTexts]) => {
    questionTexts.forEach((questionText) => {
      questions.push({
        id: `${categorySlug}-${skillLevel.toLowerCase()}-${questionCounter++}`,
        skillLevel: skillLevel.toLowerCase(),
        category: categorySlug,
        categoryName: categoryData.category,
        question: questionText,
        type: 'interview-question',
        topics: []
      })
    })
  })

  return questions
}

/**
 * Compile all question files into a static data module
 */
async function compileQuestions() {
  console.log('üîÑ Compiling question data...')
  
  const questionsDir = path.join(__dirname, '../public/questions')
  const outputPath = path.join(__dirname, '../src/data/compiledQuestions.js')
  
  // Ensure output directory exists
  const outputDir = path.dirname(outputPath)
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true })
  }

  try {
    // Read all question files
    const questionFiles = fs.readdirSync(questionsDir)
      .filter(file => file.endsWith('.json'))
      .sort()

    console.log(`üìÅ Found ${questionFiles.length} question files:`, questionFiles)

    const compiledCategories = {}
    const allQuestions = []

    // Process each question file
    for (const fileName of questionFiles) {
      const filePath = path.join(questionsDir, fileName)
      const fileContent = fs.readFileSync(filePath, 'utf8')
      const categoryData = JSON.parse(fileContent)
      
      const categorySlug = generateCategorySlug(categoryData.category)
      console.log(`üìù Processing ${fileName} -> ${categorySlug}`)
      
      // Store category data
      compiledCategories[categorySlug] = {
        ...categoryData,
        slug: categorySlug,
        fileName: fileName
      }

      // Transform and add questions
      const categoryQuestions = transformCategoryData(categoryData, categorySlug)
      allQuestions.push(...categoryQuestions)
    }

    // Generate the JavaScript module content
    const moduleContent = `// @ts-check
// This file is auto-generated by scripts/compile-questions.js
// Do not edit manually - changes will be overwritten on next build

/**
 * Compiled question data - generated at build time
 * Generated on: ${new Date().toISOString()}
 * Source files: ${questionFiles.length} question files
 * Total questions: ${allQuestions.length}
 */

/**
 * @typedef {Object} Question
 * @property {string} id - Unique identifier for the question
 * @property {string} skillLevel - Skill level (novice, intermediate, expert, master)
 * @property {string} category - Core skill category slug
 * @property {string} categoryName - Full category name
 * @property {string} question - The interview question text
 * @property {string} type - Type of question (technical, behavioral, etc.)
 * @property {string[]} topics - Related topics/skills
 */

/**
 * @typedef {Object} CategoryData
 * @property {string} category - Category name
 * @property {string} slug - URL-friendly slug
 * @property {string} fileName - Source file name
 * @property {Object.<string, string[]>} questions - Questions by skill level
 */

/**
 * Compiled categories data
 * @type {Object.<string, CategoryData>}
 */
export const COMPILED_CATEGORIES = ${JSON.stringify(compiledCategories, null, 2)}

/**
 * Compiled questions data
 * @type {Question[]}
 */
export const COMPILED_QUESTIONS = ${JSON.stringify(allQuestions, null, 2)}

/**
 * Build metadata
 */
export const BUILD_INFO = {
  generatedAt: '${new Date().toISOString()}',
  questionFilesCount: ${questionFiles.length},
  totalQuestions: ${allQuestions.length},
  categoriesCount: ${Object.keys(compiledCategories).length},
  sourceFiles: ${JSON.stringify(questionFiles)}
}
`

    // Write the compiled module
    fs.writeFileSync(outputPath, moduleContent, 'utf8')
    
    console.log(`‚úÖ Successfully compiled question data!`)
    console.log(`üìä Stats:`)
    console.log(`   ‚Ä¢ Categories: ${Object.keys(compiledCategories).length}`)
    console.log(`   ‚Ä¢ Questions: ${allQuestions.length}`)
    console.log(`   ‚Ä¢ Output: ${outputPath}`)
    
  } catch (error) {
    console.error('‚ùå Error compiling questions:', error)
    process.exit(1)
  }
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  compileQuestions()
}

export { compileQuestions } 